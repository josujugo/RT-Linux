<root>
  <pysimCoder>
    <pysimCoderVersion>0.9</pysimCoderVersion>
  </pysimCoder>
  <Date>
    <SavingDate>23.03.2022 - 23:28:35</SavingDate>
  </Date>
  <Simulation>
    <Template>sim.tmf</Template>
    <Ts>0.01</Ts>
    <AddObj></AddObj>
    <ParScript></ParScript>
    <Tf>10</Tf>
    <Priority></Priority>
  </Simulation>
  <block>
    <name>Sub</name>
    <inp>2</inp>
    <outp>1</outp>
    <inset>0</inset>
    <outset>0</outset>
    <icon>PM</icon>
    <params>sumBlk|Gains: [1,-1]</params>
    <help>This block get the weighted sum of the input signals.

It can have more than 2 inputs.
</help>
    <width>80</width>
    <flip>0</flip>
    <posX>-250.0</posX>
    <posY>-140.0</posY>
  </block>
  <block>
    <name>Gain</name>
    <inp>1</inp>
    <outp>1</outp>
    <inset>1</inset>
    <outset>1</outset>
    <icon>MULT</icon>
    <params>matmultBlk|Gains: 1</params>
    <help>Implements the multiplication of the input with a matrix of coefficients.
</help>
    <width>80</width>
    <flip>0</flip>
    <posX>-120.0</posX>
    <posY>-140.0</posY>
  </block>
  <block>
    <name>UnixSkServer</name>
    <inp>0</inp>
    <outp>1</outp>
    <inset>0</inset>
    <outset>1</outset>
    <icon>UNIXSOCK</icon>
    <params>unixsocketSBlk|Socket: 'ssock'|Default outputs:[0.]</params>
    <help>This block implements a Unix Socket Server, which can receive signals from a client and pass them as double values into the block diagram.

Parameters:
Socket: the socket name
Default output: the output before arriving of data
</help>
    <width>80</width>
    <flip>0</flip>
    <posX>-390.0</posX>
    <posY>-160.0</posY>
  </block>
  <block>
    <name>LTI_continous</name>
    <inp>1</inp>
    <outp>1</outp>
    <inset>1</inset>
    <outset>1</outset>
    <icon>CSS</icon>
    <params>cssBlk|System:tf(1,[1,1])|Initial conditions: 0</params>
    <help>This block implements a linear continous dynamic system.

It can be defined as transfer function (control.tf) or as state space system (control.ss)

Parameters:
LTI continous system
Initial conditions of the state(s) as array, or "0" (all states have 0 initial conditions)
</help>
    <width>80</width>
    <flip>0</flip>
    <posX>50.0</posX>
    <posY>-140.0</posY>
  </block>
  <block>
    <name>RT Plot</name>
    <inp>1</inp>
    <outp>0</outp>
    <inset>1</inset>
    <outset>0</outset>
    <icon>PLOT</icon>
    <params>scopeStream|Decimation:1</params>
    <help>This block allows to display in real time the input signals.

</help>
    <width>80</width>
    <flip>0</flip>
    <posX>200.0</posX>
    <posY>-140.0</posY>
  </block>
  <connection>
    <pos1X>90.0</pos1X>
    <pos1Y>-140.0</pos1Y>
    <pos2X>-290.0</pos2X>
    <pos2Y>-120.0</pos2Y>
    <pt>130.0,-140.0</pt>
    <pt>130.0,-10.0</pt>
    <pt>-310.0,-10.0</pt>
    <pt>-320.0,-10.0</pt>
    <pt>-320.0,-120.0</pt>
    <pt>-320.0,-120.0</pt>
  </connection>
  <connection>
    <pos1X>-80.0</pos1X>
    <pos1Y>-140.0</pos1Y>
    <pos2X>10.0</pos2X>
    <pos2Y>-140.0</pos2Y>
    <pt>-30.0,-140.0</pt>
    <pt>-30.0,-140.0</pt>
  </connection>
  <connection>
    <pos1X>-210.0</pos1X>
    <pos1Y>-140.0</pos1Y>
    <pos2X>-160.0</pos2X>
    <pos2Y>-140.0</pos2Y>
    <pt>-180.0,-140.0</pt>
    <pt>-180.0,-140.0</pt>
  </connection>
  <connection>
    <pos1X>90.0</pos1X>
    <pos1Y>-140.0</pos1Y>
    <pos2X>160.0</pos2X>
    <pos2Y>-140.0</pos2Y>
    <pt>150.0,-140.0</pt>
    <pt>150.0,-140.0</pt>
  </connection>
  <connection>
    <pos1X>-350.0</pos1X>
    <pos1Y>-160.0</pos1Y>
    <pos2X>-290.0</pos2X>
    <pos2Y>-160.0</pos2Y>
    <pt>-330.0,-160.0</pt>
    <pt>-330.0,-160.0</pt>
  </connection>
</root>
